
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\006\003\000\002\007" +
    "\004\000\002\007\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\031\002\000\002\022\013" +
    "\000\002\023\004\000\002\023\003\000\002\032\002\000" +
    "\002\024\007\000\002\005\003\000\002\005\003\000\002" +
    "\033\002\000\002\025\006\000\002\025\002\000\002\034" +
    "\002\000\002\035\002\000\002\016\015\000\002\036\002" +
    "\000\002\037\002\000\002\026\015\000\002\040\002\000" +
    "\002\041\002\000\002\020\014\000\002\042\002\000\002" +
    "\021\007\000\002\021\002\000\002\043\002\000\002\044" +
    "\002\000\002\045\002\000\002\017\023\000\002\004\003" +
    "\000\002\004\003\000\002\046\002\000\002\047\002\000" +
    "\002\015\013\000\002\050\002\000\002\027\006\000\002" +
    "\051\002\000\002\027\006\000\002\052\002\000\002\027" +
    "\006\000\002\053\002\000\002\027\006\000\002\027\004" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\005\000\002" +
    "\014\006\000\002\013\005\000\002\013\007\000\002\010" +
    "\003\000\002\010\003\000\002\012\005\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\044\003\032\004\021\005\034\006\011\010" +
    "\005\025\014\031\025\032\037\033\017\043\040\045\031" +
    "\046\041\047\030\051\026\054\020\055\035\056\007\001" +
    "\002\000\054\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\010\ufffc\025\ufffc\031\ufffc\032\ufffc\033\ufffc\036\ufffc\043" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\001\002\000\014\004\055\005" +
    "\034\006\011\010\005\033\017\001\002\000\054\002\ufff7" +
    "\003\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\025\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\036\ufff7\043\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\001\002\000\004\040\247\001\002\000\054\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\010\ufffb\025\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\036\ufffb\043\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\001\002\000\114\002\uffb7\003\uffb7\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\036\uffb7\040\uffb7\043\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\001\002\000\070\002\uffc7\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\010\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7" +
    "\043\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000\054\002\ufffe" +
    "\003\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe\025\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\036\ufffe\043\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\001\002\000\016\004\055\005\034\006\011\010\005" +
    "\025\014\033\017\001\002\000\046\002\000\003\032\004" +
    "\021\005\034\006\011\010\005\025\014\031\025\032\037" +
    "\033\017\043\040\045\031\046\041\047\030\051\026\054" +
    "\020\055\035\056\007\001\002\000\054\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\010\ufff8\025\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\036\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\001" +
    "\002\000\016\004\055\005\034\006\011\010\005\025\014" +
    "\033\017\001\002\000\004\033\222\001\002\000\112\002" +
    "\uffb9\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\031\uffb9\032\uffb9\033\uffb9\036\uffb9\042\217\043" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\001\002\000\064\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\010\ufffd\022\062\023\061" +
    "\024\063\025\ufffd\026\057\031\ufffd\032\ufffd\033\ufffd\036" +
    "\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\114\002" +
    "\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\142\010\144" +
    "\011\147\012\146\013\145\014\212\015\215\016\210\017" +
    "\211\020\214\021\213\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\040" +
    "\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000\004\004" +
    "\177\001\002\000\004\004\uffb1\001\002\000\004\033\140" +
    "\001\002\000\054\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\010\ufff5\025\ufff5\031\ufff5\032\ufff5\033\ufff5\036\ufff5" +
    "\043\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\004\033\122" +
    "\001\002\000\004\035\110\001\002\000\006\036\107\040" +
    "\106\001\002\000\054\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\010\ufffa\025\ufffa\031\ufffa\032\ufffa\033\ufffa\036" +
    "\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\114\002" +
    "\uffb8\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036\uffb8\040" +
    "\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\004\040" +
    "\105\001\002\000\054\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\010\ufff9\025\ufff9\031\ufff9\032\ufff9\033\ufff9\036" +
    "\ufff9\043\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\004\004" +
    "\uffb0\001\002\000\004\033\uffd3\001\002\000\004\035\045" +
    "\001\002\000\054\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\010\ufff6\025\ufff6\031\ufff6\032\ufff6\033\ufff6\036\ufff6" +
    "\043\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000\004\002\044" +
    "\001\002\000\004\002\001\001\002\000\044\003\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\010\uffe5\025\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\001\002\000\044\003\032\004\021" +
    "\005\034\006\011\010\005\025\014\031\025\032\037\033" +
    "\017\043\040\045\031\046\041\047\030\051\026\054\020" +
    "\055\035\056\007\001\002\000\046\003\032\004\021\005" +
    "\034\006\011\010\005\025\014\031\025\032\037\033\017" +
    "\036\050\043\040\045\031\046\041\047\030\051\026\054" +
    "\020\055\035\056\007\001\002\000\004\043\052\001\002" +
    "\000\054\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\010" +
    "\uffff\025\uffff\031\uffff\032\uffff\033\uffff\036\uffff\043\uffff" +
    "\045\uffff\046\uffff\047\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\001\002\000\004\033\uffe4\001\002" +
    "\000\004\033\054\001\002\000\016\004\055\005\034\006" +
    "\011\010\005\025\014\033\017\001\002\000\114\002\uffb9" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\040\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002\000\014\022\062" +
    "\023\061\024\063\026\057\034\060\001\002\000\016\004" +
    "\uffca\005\uffca\006\uffca\010\uffca\025\uffca\033\uffca\001\002" +
    "\000\004\040\072\001\002\000\016\004\uffce\005\uffce\006" +
    "\uffce\010\uffce\025\uffce\033\uffce\001\002\000\016\004\uffd0" +
    "\005\uffd0\006\uffd0\010\uffd0\025\uffd0\033\uffd0\001\002\000" +
    "\016\004\uffcc\005\uffcc\006\uffcc\010\uffcc\025\uffcc\033\uffcc" +
    "\001\002\000\016\004\055\005\034\006\011\010\005\025" +
    "\014\033\017\001\002\000\070\002\uffcb\003\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\010\uffcb\022\uffcb\023\061\024\uffcb\025" +
    "\uffcb\026\057\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb" +
    "\040\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000\016" +
    "\004\055\005\034\006\011\010\005\025\014\033\017\001" +
    "\002\000\070\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\010\uffcf\022\uffcf\023\061\024\uffcf\025\uffcf\026\057\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\040\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\001\002\000\016\004\055\005\034" +
    "\006\011\010\005\025\014\033\017\001\002\000\070\002" +
    "\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd\010\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\036\uffcd\040\uffcd\043\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\054\002\uffe3\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\025\uffe3\031\uffe3\032\uffe3\033\uffe3\036" +
    "\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\016\004" +
    "\055\005\034\006\011\010\005\025\014\033\017\001\002" +
    "\000\070\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\036\uffc9\040\uffc9\043\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\001\002\000\004\033\076\001\002\000" +
    "\016\004\055\005\034\006\011\010\005\025\014\033\017" +
    "\001\002\000\014\022\062\023\061\024\063\026\057\034" +
    "\100\001\002\000\004\035\uffd2\001\002\000\004\035\102" +
    "\001\002\000\044\003\032\004\021\005\034\006\011\010" +
    "\005\025\014\031\025\032\037\033\017\043\040\045\031" +
    "\046\041\047\030\051\026\054\020\055\035\056\007\001" +
    "\002\000\046\003\032\004\021\005\034\006\011\010\005" +
    "\025\014\031\025\032\037\033\017\036\104\043\040\045" +
    "\031\046\041\047\030\051\026\054\020\055\035\056\007" +
    "\001\002\000\054\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\010\uffd1\025\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1" +
    "\043\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\054\002\ufff4" +
    "\003\ufff4\004\ufff4\005\ufff4\006\ufff4\010\ufff4\025\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\036\ufff4\043\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056" +
    "\ufff4\001\002\000\054\002\ufff2\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\010\ufff2\025\ufff2\031\ufff2\032\ufff2\033\ufff2\036" +
    "\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000\054\002" +
    "\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\010\ufff1\025\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\036\ufff1\043\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\001\002\000\044\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\025\uffe2\031\uffe2\032\uffe2\033\uffe2\043\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\051\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\001\002\000\044\003\032\004\021\005\034\006\011" +
    "\010\005\025\014\031\025\032\037\033\017\043\040\045" +
    "\031\046\041\047\030\051\026\054\020\055\035\056\007" +
    "\001\002\000\046\003\032\004\021\005\034\006\011\010" +
    "\005\025\014\031\025\032\037\033\017\036\113\043\040" +
    "\045\031\046\041\047\030\051\026\054\020\055\035\056" +
    "\007\001\002\000\004\044\114\001\002\000\004\033\uffe1" +
    "\001\002\000\004\033\116\001\002\000\016\004\055\005" +
    "\034\006\011\010\005\025\014\033\017\001\002\000\014" +
    "\022\062\023\061\024\063\026\057\034\120\001\002\000" +
    "\004\040\121\001\002\000\054\002\uffe0\003\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\010\uffe0\025\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\036\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000" +
    "\016\004\055\005\034\006\011\010\005\025\014\033\017" +
    "\001\002\000\014\022\062\023\061\024\063\026\057\034" +
    "\uffdf\001\002\000\004\034\125\001\002\000\004\035\126" +
    "\001\002\000\044\003\032\004\021\005\034\006\011\010" +
    "\005\025\014\031\025\032\037\033\017\043\040\045\031" +
    "\046\041\047\030\051\026\054\020\055\035\056\007\001" +
    "\002\000\046\003\032\004\021\005\034\006\011\010\005" +
    "\025\014\031\025\032\037\033\017\036\130\043\040\045" +
    "\031\046\041\047\030\051\026\054\020\055\035\056\007" +
    "\001\002\000\056\002\uffde\003\uffde\004\uffde\005\uffde\006" +
    "\uffde\010\uffde\025\uffde\031\uffde\032\uffde\033\uffde\036\uffde" +
    "\043\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\001\002\000\056" +
    "\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda\010\uffda\025" +
    "\uffda\031\uffda\032\uffda\033\uffda\036\uffda\043\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\133\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\001\002\000\054\002\uffdd\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\010\uffdd\025\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\036\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001" +
    "\002\000\004\035\uffdc\001\002\000\004\035\135\001\002" +
    "\000\044\003\032\004\021\005\034\006\011\010\005\025" +
    "\014\031\025\032\037\033\017\043\040\045\031\046\041" +
    "\047\030\051\026\054\020\055\035\056\007\001\002\000" +
    "\046\003\032\004\021\005\034\006\011\010\005\025\014" +
    "\031\025\032\037\033\017\036\137\043\040\045\031\046" +
    "\041\047\030\051\026\054\020\055\035\056\007\001\002" +
    "\000\054\002\uffdb\003\uffdb\004\uffdb\005\uffdb\006\uffdb\010" +
    "\uffdb\025\uffdb\031\uffdb\032\uffdb\033\uffdb\036\uffdb\043\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\014\004\055\005\034" +
    "\006\011\010\005\033\017\001\002\000\016\007\142\010" +
    "\144\011\147\012\146\013\145\034\ufff0\001\002\000\014" +
    "\004\055\005\034\006\011\010\005\033\017\001\002\000" +
    "\004\034\154\001\002\000\014\004\055\005\034\006\011" +
    "\010\005\033\017\001\002\000\014\004\055\005\034\006" +
    "\011\010\005\033\017\001\002\000\014\004\055\005\034" +
    "\006\011\010\005\033\017\001\002\000\014\004\055\005" +
    "\034\006\011\010\005\033\017\001\002\000\114\002\uffbc" +
    "\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\145\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc\040\uffbc" +
    "\043\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002\000\114\002\uffbb" +
    "\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\145\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\040\uffbb" +
    "\043\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\001\002\000\114\002\uffba" +
    "\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\145\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba\040\uffba" +
    "\043\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\001\002\000\114\002\uffbd" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\147\012\146\013\145\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\040\uffbd" +
    "\043\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\004\035\155" +
    "\001\002\000\004\052\160\001\002\000\010\036\uffe6\052" +
    "\160\053\170\001\002\000\010\036\uffed\052\uffed\053\uffed" +
    "\001\002\000\006\005\163\006\162\001\002\000\004\041" +
    "\uffec\001\002\000\004\041\uffe9\001\002\000\004\041\uffea" +
    "\001\002\000\004\041\165\001\002\000\044\003\032\004" +
    "\021\005\034\006\011\010\005\025\014\031\025\032\037" +
    "\033\017\043\040\045\031\046\041\047\030\051\026\054" +
    "\020\055\035\056\007\001\002\000\052\003\032\004\021" +
    "\005\034\006\011\010\005\025\014\031\025\032\037\033" +
    "\017\036\uffeb\043\040\045\031\046\041\047\030\051\026" +
    "\052\uffeb\053\uffeb\054\020\055\035\056\007\001\002\000" +
    "\004\036\175\001\002\000\004\041\uffe8\001\002\000\010" +
    "\036\uffee\052\uffee\053\uffee\001\002\000\004\041\173\001" +
    "\002\000\044\003\032\004\021\005\034\006\011\010\005" +
    "\025\014\031\025\032\037\033\017\043\040\045\031\046" +
    "\041\047\030\051\026\054\020\055\035\056\007\001\002" +
    "\000\046\003\032\004\021\005\034\006\011\010\005\025" +
    "\014\031\025\032\037\033\017\036\uffe7\043\040\045\031" +
    "\046\041\047\030\051\026\054\020\055\035\056\007\001" +
    "\002\000\054\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef" +
    "\010\uffef\025\uffef\031\uffef\032\uffef\033\uffef\036\uffef\043" +
    "\uffef\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\001\002\000\114\002\uffbe\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\147" +
    "\012\146\013\145\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\043" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\001\002\000\010\037\uffae\040" +
    "\uffae\042\uffae\001\002\000\010\037\201\040\202\042\203" +
    "\001\002\000\004\004\206\001\002\000\054\002\uffb3\003" +
    "\uffb3\004\uffb3\005\uffb3\006\uffb3\010\uffb3\025\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\036\uffb3\043\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\001\002\000\014\004\055\005\034\006\011\010\005\033" +
    "\017\001\002\000\016\007\142\010\144\011\147\012\146" +
    "\013\145\040\205\001\002\000\054\002\uffb2\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\010\uffb2\025\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\036\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002" +
    "\000\010\037\uffaf\040\uffaf\042\uffaf\001\002\000\014\004" +
    "\055\005\034\006\011\010\005\033\017\001\002\000\014" +
    "\004\uffc2\005\uffc2\006\uffc2\010\uffc2\033\uffc2\001\002\000" +
    "\014\004\uffc1\005\uffc1\006\uffc1\010\uffc1\033\uffc1\001\002" +
    "\000\014\004\uffc4\005\uffc4\006\uffc4\010\uffc4\033\uffc4\001" +
    "\002\000\014\004\uffbf\005\uffbf\006\uffbf\010\uffbf\033\uffbf" +
    "\001\002\000\014\004\uffc0\005\uffc0\006\uffc0\010\uffc0\033" +
    "\uffc0\001\002\000\014\004\uffc3\005\uffc3\006\uffc3\010\uffc3" +
    "\033\uffc3\001\002\000\100\002\uffc6\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\142\010\144\011\147\012\146\013\145" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\043\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\001\002\000\014\004\055\005\034\006\011" +
    "\010\005\033\017\001\002\000\016\007\142\010\144\011" +
    "\147\012\146\013\145\040\221\001\002\000\054\002\uffb4" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\010\uffb4\025\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\036\uffb4\043\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\001\002\000\004\031\223\001\002\000\004\004\224" +
    "\001\002\000\004\042\uffd9\001\002\000\004\042\226\001" +
    "\002\000\014\004\055\005\034\006\011\010\005\033\017" +
    "\001\002\000\016\007\142\010\144\011\147\012\146\013" +
    "\145\040\230\001\002\000\016\004\uffd8\005\uffd8\006\uffd8" +
    "\010\uffd8\025\uffd8\033\uffd8\001\002\000\016\004\055\005" +
    "\034\006\011\010\005\025\014\033\017\001\002\000\014" +
    "\022\062\023\061\024\063\026\057\040\233\001\002\000" +
    "\006\027\uffd7\030\uffd7\001\002\000\006\027\236\030\237" +
    "\001\002\000\004\034\240\001\002\000\004\034\uffd5\001" +
    "\002\000\004\034\uffd4\001\002\000\004\035\241\001\002" +
    "\000\044\003\032\004\021\005\034\006\011\010\005\025" +
    "\014\031\025\032\037\033\017\043\040\045\031\046\041" +
    "\047\030\051\026\054\020\055\035\056\007\001\002\000" +
    "\046\003\032\004\021\005\034\006\011\010\005\025\014" +
    "\031\025\032\037\033\017\036\243\043\040\045\031\046" +
    "\041\047\030\051\026\054\020\055\035\056\007\001\002" +
    "\000\054\002\uffd6\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010" +
    "\uffd6\025\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\043\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\001\002\000\014\022\062\023\061" +
    "\024\063\026\057\034\245\001\002\000\114\002\uffb5\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\040\uffb5\043" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\001\002\000\070\002\uffc8\003" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\036\uffc8\040\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\001" +
    "\002\000\054\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\010\ufff3\025\ufff3\031\ufff3\032\ufff3\033\ufff3\036\ufff3\043" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\001\002\000\114\002\uffb6\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\147" +
    "\012\146\013\145\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\040\uffb6\043" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\040\002\022\006\042\007\014\010\023\011" +
    "\012\013\003\014\032\015\007\016\026\017\035\020\015" +
    "\022\005\026\041\027\021\030\011\001\001\000\002\001" +
    "\001\000\004\002\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\022\027\245\030\011" +
    "\001\001\000\034\002\022\010\023\011\050\013\003\014" +
    "\032\015\007\016\026\017\035\020\015\022\005\026\041" +
    "\027\021\030\011\001\001\000\002\001\001\000\010\002" +
    "\022\027\243\030\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\206\001\001\000" +
    "\004\012\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\045\001\001\000" +
    "\036\002\022\007\046\010\023\011\012\013\003\014\032" +
    "\015\007\016\026\017\035\020\015\022\005\026\041\027" +
    "\021\030\011\001\001\000\034\002\022\010\023\011\050" +
    "\013\003\014\032\015\007\016\026\017\035\020\015\022" +
    "\005\026\041\027\021\030\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\052\001\001\000\002\001" +
    "\001\000\010\002\022\027\055\030\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\072\001\001\000" +
    "\002\001\001\000\004\051\067\001\001\000\004\050\065" +
    "\001\001\000\004\052\063\001\001\000\010\002\022\027" +
    "\064\030\011\001\001\000\002\001\001\000\010\002\022" +
    "\027\066\030\011\001\001\000\002\001\001\000\010\002" +
    "\022\027\070\030\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\022\027\073\030\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\022\027\076" +
    "\030\011\001\001\000\002\001\001\000\004\047\100\001" +
    "\001\000\002\001\001\000\036\002\022\007\102\010\023" +
    "\011\012\013\003\014\032\015\007\016\026\017\035\020" +
    "\015\022\005\026\041\027\021\030\011\001\001\000\034" +
    "\002\022\010\023\011\050\013\003\014\032\015\007\016" +
    "\026\017\035\020\015\022\005\026\041\027\021\030\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\110\001\001\000\036" +
    "\002\022\007\111\010\023\011\012\013\003\014\032\015" +
    "\007\016\026\017\035\020\015\022\005\026\041\027\021" +
    "\030\011\001\001\000\034\002\022\010\023\011\050\013" +
    "\003\014\032\015\007\016\026\017\035\020\015\022\005" +
    "\026\041\027\021\030\011\001\001\000\002\001\001\000" +
    "\004\037\114\001\001\000\002\001\001\000\010\002\022" +
    "\027\116\030\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\022\027\122\030\011" +
    "\001\001\000\004\040\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\022\007\126\010\023\011\012" +
    "\013\003\014\032\015\007\016\026\017\035\020\015\022" +
    "\005\026\041\027\021\030\011\001\001\000\034\002\022" +
    "\010\023\011\050\013\003\014\032\015\007\016\026\017" +
    "\035\020\015\022\005\026\041\027\021\030\011\001\001" +
    "\000\004\041\130\001\001\000\004\021\131\001\001\000" +
    "\002\001\001\000\004\042\133\001\001\000\002\001\001" +
    "\000\036\002\022\007\135\010\023\011\012\013\003\014" +
    "\032\015\007\016\026\017\035\020\015\022\005\026\041" +
    "\027\021\030\011\001\001\000\034\002\022\010\023\011" +
    "\050\013\003\014\032\015\007\016\026\017\035\020\015" +
    "\022\005\026\041\027\021\030\011\001\001\000\002\001" +
    "\001\000\004\002\140\001\001\000\004\031\142\001\001" +
    "\000\004\002\175\001\001\000\002\001\001\000\004\002" +
    "\152\001\001\000\004\002\151\001\001\000\004\002\150" +
    "\001\001\000\004\002\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\155\024\156\001\001\000\006\024" +
    "\170\025\166\001\001\000\002\001\001\000\004\005\160" +
    "\001\001\000\004\032\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\002\022\007\165" +
    "\010\023\011\012\013\003\014\032\015\007\016\026\017" +
    "\035\020\015\022\005\026\041\027\021\030\011\001\001" +
    "\000\034\002\022\010\023\011\050\013\003\014\032\015" +
    "\007\016\026\017\035\020\015\022\005\026\041\027\021" +
    "\030\011\001\001\000\002\001\001\000\004\033\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\002\022" +
    "\007\173\010\023\011\012\013\003\014\032\015\007\016" +
    "\026\017\035\020\015\022\005\026\041\027\021\030\011" +
    "\001\001\000\034\002\022\010\023\011\050\013\003\014" +
    "\032\015\007\016\026\017\035\020\015\022\005\026\041" +
    "\027\021\030\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\224\001\001\000\002\001\001\000\004\002" +
    "\226\001\001\000\002\001\001\000\004\044\230\001\001" +
    "\000\010\002\022\027\231\030\011\001\001\000\002\001" +
    "\001\000\004\045\233\001\001\000\004\004\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\022\007\241\010\023\011\012" +
    "\013\003\014\032\015\007\016\026\017\035\020\015\022" +
    "\005\026\041\027\021\030\011\001\001\000\034\002\022" +
    "\010\023\011\050\013\003\014\032\015\007\016\026\017" +
    "\035\020\015\022\005\026\041\027\021\030\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        Interfaz_c3d.notificar_er("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Interfaz_c3d.notificar_er("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		
                Generador_tmp.reset();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= LOG 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(log.etq_true+":\n"+log.etq_false+":");
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= DECLARA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= ASIGNA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= FOR 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= IF 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= SELECT 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= REPEAT 
            {
              Object RESULT =null;
		
                 //Interfaz_c3d.notificar(" "); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= DO_WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= DETENER PYCOMA 
            {
              Object RESULT =null;
		 //vamos a validar cuando aparecen estas expresiones
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    Interfaz_c3d.notificar("goto "+display.peek().et_salida);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= CONTINUA PYCOMA 
            {
              Object RESULT =null;
		
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    if(display.peek().tipo==2){
                        Interfaz_c3d.notificar("ERROR: la sentencia envolvnete no permite continue");
                    }else{
                        Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= error LLAV_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    tmp= new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),2); //generamos las etiquetas de inicio y salida
                    display.push(tmp);
                    Interfaz_c3d.notificar("goto "+display.peek().et_inicio);
                    heredado=exp; //valor a comparar con cada caso
                    aux=""; //cadena donde llevaremos los saltos condicionales de los casos
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SELECT ::= SELEC PAR_A EXP NT$0 PAR_C LLAV_A CASOS DEF LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    Interfaz_c3d.notificar(aux);
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASOS ::= CASOS C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASOS ::= C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="if "+heredado+"=="+val+" goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= CASO VAL NT$1 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("C",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAL ::= ENTERO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ent;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAL ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=dec;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;

                String et=Generador_tmp.genera_etq(); //generamos la etiqueta del caso
                Interfaz_c3d.notificar(et+":"); // la escribimos antes de sus sentencias
                aux+="goto "+et+"\n";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEF ::= DEFECTO NT$2 DPUNTO SENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                //a defecto despues de sus sentencias de una vez se le agrega la etiqueta de salida
                Interfaz_c3d.notificar("goto "+display.peek().et_salida);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEF ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;

                        tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                        display.push(tmp);
                        aux=Generador_tmp.genera_etq();
                        Interfaz_c3d.notificar(aux+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DO_WHILE ::= HACER LLAV_A NT$3 SENTENCIAS LLAV_C MIENTRAS NT$4 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        Interfaz_c3d.notificar(log.etq_true+":");
                        Interfaz_c3d.notificar("goto "+aux);
                        Interfaz_c3d.notificar(log.etq_false+":");
                        Interfaz_c3d.notificar(display.peek().et_salida+":");
                        display.pop();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =null;

                    tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                    display.push(tmp);
                    aux=Generador_tmp.genera_etq();
                    Interfaz_c3d.notificar(aux+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REPEAT ::= REPETIR LLAV_A NT$5 SENTENCIAS LLAV_C HASTA NT$6 PAR_A LOG PAR_C PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Interfaz_c3d.notificar(log.etq_false+":");
                    Interfaz_c3d.notificar("goto "+aux);
                    Interfaz_c3d.notificar(log.etq_true+":");
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPEAT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                heredado=log.etq_false; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= SI PAR_A LOG NT$7 PAR_C LLAV_A SENTENCIAS LLAV_C NT$8 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT =null;

                aux=Generador_tmp.genera_etq();
                Interfaz_c3d.notificar("goto "+aux);
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELSE ::= SINO NT$9 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Interfaz_c3d.notificar(aux+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE ::= 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                heredado=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(id+"="+exp); //asigna el valor
                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= PARA PAR_A INT1 ID NT$10 ASIG EXP PYCOMA NT$11 LOG PYCOMA NT$12 OPER PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar(op);    
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPER ::= INC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"+1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPER ::= DEC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"-1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$13 ::= 
            {
              Object RESULT =null;

                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= MIENTRAS NT$13 PAR_A LOG PAR_C NT$14 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOG ::= LOG OR NT$15 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_true+","+rel2.etq_true;  
                RESULT.etq_false= rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$16 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOG ::= LOG AND NT$16 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel2.etq_true;  
                RESULT.etq_false= rel1.etq_false+","+rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$17 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOG ::= LOG XOR NT$17 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(rel1.etq_true+":");
                Interfaz_c3d.notificar(rel2.aux);
                RESULT= new Atributo_C3D();
                RESULT.etq_true =rel2.etq_true;
                RESULT.etq_false=rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$18 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOG ::= LOG NAND NT$18 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_false+","+rel2.etq_false;  
                RESULT.etq_false= rel2.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOG ::= NOT LOG 
            {
              Atributo_C3D RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true = rel.etq_false;
                RESULT.etq_false = rel.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOG ::= REL 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REL ::= EXP OP_REL EXP 
            {
              Atributo_C3D RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true= Generador_tmp.genera_etq();
                RESULT.etq_false= Generador_tmp.genera_etq();
                //imprimimos la condicion de la expresion relacional con su saltos
                Interfaz_c3d.notificar("if "+t1+op+t2+" then goto "+RESULT.etq_true+"\ngoto "+RESULT.etq_false);
                // creamos la cadena temporal solo se usa en XOR
                RESULT.aux= "if "+t1+op+t2+" then goto "+RESULT.etq_false+"\ngoto "+RESULT.etq_true; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REL ::= EXP 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.aux= val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_REL ::= ABOVE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_REL ::= BELOW 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_REL ::= ABOVEE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_REL ::= BELOWE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_REL ::= EQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_REL ::= NEQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP MAS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp(); //sintetizo el temporal 
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2); //imprimo la cadena la operacion
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP MENOS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP POR EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP DIV EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP POT EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= ENTERO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= DECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= MENOS EXP 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+sim+val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= PAR_A LOG PAR_C 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = val.aux;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNA ::= ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar(id+"="+exp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARA ::= TIPO L PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar("Reserva espacio y almacena el id de las variables.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARA ::= TIPO L ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar("Asigna "+exp+" a cada varibale declarada.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPO ::= INT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO ::= CHAR1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L ::= L COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
