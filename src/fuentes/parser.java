
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package fuentes;

import java_cup.runtime.Symbol;
import Interfaz.Interfaz_c3d;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\005\003\000\002\006" +
    "\004\000\002\006\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\025" +
    "\002\000\002\026\002\000\002\015\014\000\002\027\002" +
    "\000\002\030\002\000\002\022\014\000\002\031\002\000" +
    "\002\032\002\000\002\017\014\000\002\033\002\000\002" +
    "\020\007\000\002\020\002\000\002\034\002\000\002\035" +
    "\002\000\002\036\002\000\002\016\023\000\002\004\003" +
    "\000\002\004\003\000\002\037\002\000\002\040\002\000" +
    "\002\014\013\000\002\041\002\000\002\023\006\000\002" +
    "\042\002\000\002\023\006\000\002\043\002\000\002\023" +
    "\006\000\002\044\002\000\002\023\006\000\002\023\004" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\005\000\002" +
    "\013\006\000\002\012\005\000\002\012\007\000\002\007" +
    "\003\000\002\007\003\000\002\011\005\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\040\004\021\005\032\006\011\010\005\025" +
    "\014\031\025\032\036\033\017\042\035\044\030\045\037" +
    "\046\027\051\020\052\033\053\007\001\002\000\044\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\025\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\036\ufffc\042\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\014\004\053" +
    "\005\032\006\011\010\005\033\017\001\002\000\044\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\010\ufff7\025\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\036\ufff7\042\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000\044\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\010\ufff3\025\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\036\ufff3\042\ufff3\044\ufff3\045\ufff3\046\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\001\002\000\044\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\010\ufffb\025\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\036\ufffb\042\ufffb\044\ufffb\045\ufffb\046\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\001\002\000\104\002\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\042\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002\000" +
    "\060\002\uffd4\004\uffd4\005\uffd4\006\uffd4\010\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\036\uffd4\040\uffd4\042\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002\000\044\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe\025\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\036\ufffe\042\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\016\004\053" +
    "\005\032\006\011\010\005\025\014\033\017\001\002\000" +
    "\042\002\000\004\021\005\032\006\011\010\005\025\014" +
    "\031\025\032\036\033\017\042\035\044\030\045\037\046" +
    "\027\051\020\052\033\053\007\001\002\000\044\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\010\ufff8\025\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\036\ufff8\042\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\001\002\000\016\004\053\005" +
    "\032\006\011\010\005\025\014\033\017\001\002\000\004" +
    "\033\166\001\002\000\102\002\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\036\uffc6\041\163\042\uffc6\044\uffc6\045\uffc6\046\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\001\002\000\054\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\010\ufffd\022\061\023\057\024\060\025" +
    "\ufffd\026\055\031\ufffd\032\ufffd\033\ufffd\036\ufffd\042\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\051\ufffd\052\ufffd\053\ufffd\001" +
    "\002\000\104\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\137" +
    "\010\141\011\144\012\143\013\142\014\156\015\161\016" +
    "\154\017\155\020\157\021\160\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\040\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\001\002\000\004\004\131\001\002\000" +
    "\004\004\uffbe\001\002\000\044\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\010\ufff5\025\ufff5\031\ufff5\032\ufff5\033\ufff5\036" +
    "\ufff5\042\ufff5\044\ufff5\045\ufff5\046\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\001\002\000\004\033\113\001\002\000\004\035" +
    "\102\001\002\000\044\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\025\ufffa\031\ufffa\032\ufffa\033\ufffa\036\ufffa\042" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\001\002\000\104\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\040\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\001\002\000\044\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\010\ufff4\025\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\036\ufff4\042\ufff4\044\ufff4\045\ufff4\046\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\001\002\000\044\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\010\ufff9\025\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\036\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\001\002\000\004\033\uffe0\001\002\000\004" +
    "\004\uffbd\001\002\000\004\035\043\001\002\000\044\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6\025\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\036\ufff6\042\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000\004\002\042" +
    "\001\002\000\004\002\001\001\002\000\040\004\ufff2\005" +
    "\ufff2\006\ufff2\010\ufff2\025\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\042\ufff2\044\ufff2\045\ufff2\046\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\001\002\000\040\004\021\005\032\006\011\010\005" +
    "\025\014\031\025\032\036\033\017\042\035\044\030\045" +
    "\037\046\027\051\020\052\033\053\007\001\002\000\042" +
    "\004\021\005\032\006\011\010\005\025\014\031\025\032" +
    "\036\033\017\036\046\042\035\044\030\045\037\046\027" +
    "\051\020\052\033\053\007\001\002\000\004\042\050\001" +
    "\002\000\044\002\uffff\004\uffff\005\uffff\006\uffff\010\uffff" +
    "\025\uffff\031\uffff\032\uffff\033\uffff\036\uffff\042\uffff\044" +
    "\uffff\045\uffff\046\uffff\051\uffff\052\uffff\053\uffff\001\002" +
    "\000\004\033\ufff1\001\002\000\004\033\052\001\002\000" +
    "\016\004\053\005\032\006\011\010\005\025\014\033\017" +
    "\001\002\000\104\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\036\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\001\002\000\014\022\061\023\057" +
    "\024\060\026\055\034\056\001\002\000\016\004\uffd7\005" +
    "\uffd7\006\uffd7\010\uffd7\025\uffd7\033\uffd7\001\002\000\044" +
    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\010\ufff0\025\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\036\ufff0\042\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\016\004" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\025\uffdb\033\uffdb\001\002" +
    "\000\016\004\uffd9\005\uffd9\006\uffd9\010\uffd9\025\uffd9\033" +
    "\uffd9\001\002\000\016\004\uffdd\005\uffdd\006\uffdd\010\uffdd" +
    "\025\uffdd\033\uffdd\001\002\000\016\004\053\005\032\006" +
    "\011\010\005\025\014\033\017\001\002\000\060\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\022\uffdc\023\057\024" +
    "\uffdc\025\uffdc\026\055\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\036\uffdc\040\uffdc\042\uffdc\044\uffdc\045\uffdc\046\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\001\002\000\016\004\053\005\032" +
    "\006\011\010\005\025\014\033\017\001\002\000\060\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\022\uffd8\023\057" +
    "\024\uffd8\025\uffd8\026\055\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\036\uffd8\040\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\001\002\000\016\004\053\005" +
    "\032\006\011\010\005\025\014\033\017\001\002\000\060" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\010\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\040\uffda\042\uffda\044\uffda\045\uffda\046" +
    "\uffda\051\uffda\052\uffda\053\uffda\001\002\000\016\004\053" +
    "\005\032\006\011\010\005\025\014\033\017\001\002\000" +
    "\060\002\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\036\uffd6\040\uffd6\042\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\004\033" +
    "\073\001\002\000\016\004\053\005\032\006\011\010\005" +
    "\025\014\033\017\001\002\000\014\022\061\023\057\024" +
    "\060\026\055\034\075\001\002\000\004\035\uffdf\001\002" +
    "\000\004\035\077\001\002\000\040\004\021\005\032\006" +
    "\011\010\005\025\014\031\025\032\036\033\017\042\035" +
    "\044\030\045\037\046\027\051\020\052\033\053\007\001" +
    "\002\000\042\004\021\005\032\006\011\010\005\025\014" +
    "\031\025\032\036\033\017\036\101\042\035\044\030\045" +
    "\037\046\027\051\020\052\033\053\007\001\002\000\044" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\010\uffde\025\uffde\031" +
    "\uffde\032\uffde\033\uffde\036\uffde\042\uffde\044\uffde\045\uffde" +
    "\046\uffde\051\uffde\052\uffde\053\uffde\001\002\000\040\004" +
    "\uffef\005\uffef\006\uffef\010\uffef\025\uffef\031\uffef\032\uffef" +
    "\033\uffef\042\uffef\044\uffef\045\uffef\046\uffef\051\uffef\052" +
    "\uffef\053\uffef\001\002\000\040\004\021\005\032\006\011" +
    "\010\005\025\014\031\025\032\036\033\017\042\035\044" +
    "\030\045\037\046\027\051\020\052\033\053\007\001\002" +
    "\000\042\004\021\005\032\006\011\010\005\025\014\031" +
    "\025\032\036\033\017\036\105\042\035\044\030\045\037" +
    "\046\027\051\020\052\033\053\007\001\002\000\004\043" +
    "\106\001\002\000\004\033\uffee\001\002\000\004\033\110" +
    "\001\002\000\016\004\053\005\032\006\011\010\005\025" +
    "\014\033\017\001\002\000\014\022\061\023\057\024\060" +
    "\026\055\034\112\001\002\000\044\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\010\uffed\025\uffed\031\uffed\032\uffed\033\uffed" +
    "\036\uffed\042\uffed\044\uffed\045\uffed\046\uffed\051\uffed\052" +
    "\uffed\053\uffed\001\002\000\016\004\053\005\032\006\011" +
    "\010\005\025\014\033\017\001\002\000\014\022\061\023" +
    "\057\024\060\026\055\034\uffec\001\002\000\004\034\116" +
    "\001\002\000\004\035\117\001\002\000\040\004\021\005" +
    "\032\006\011\010\005\025\014\031\025\032\036\033\017" +
    "\042\035\044\030\045\037\046\027\051\020\052\033\053" +
    "\007\001\002\000\042\004\021\005\032\006\011\010\005" +
    "\025\014\031\025\032\036\033\017\036\121\042\035\044" +
    "\030\045\037\046\027\051\020\052\033\053\007\001\002" +
    "\000\046\002\uffeb\004\uffeb\005\uffeb\006\uffeb\010\uffeb\025" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\036\uffeb\042\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\001" +
    "\002\000\046\002\uffe7\004\uffe7\005\uffe7\006\uffe7\010\uffe7" +
    "\025\uffe7\031\uffe7\032\uffe7\033\uffe7\036\uffe7\042\uffe7\044" +
    "\uffe7\045\uffe7\046\uffe7\047\124\051\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\044\002\uffea\004\uffea\005\uffea\006\uffea\010" +
    "\uffea\025\uffea\031\uffea\032\uffea\033\uffea\036\uffea\042\uffea" +
    "\044\uffea\045\uffea\046\uffea\051\uffea\052\uffea\053\uffea\001" +
    "\002\000\004\035\uffe9\001\002\000\004\035\126\001\002" +
    "\000\040\004\021\005\032\006\011\010\005\025\014\031" +
    "\025\032\036\033\017\042\035\044\030\045\037\046\027" +
    "\051\020\052\033\053\007\001\002\000\042\004\021\005" +
    "\032\006\011\010\005\025\014\031\025\032\036\033\017" +
    "\036\130\042\035\044\030\045\037\046\027\051\020\052" +
    "\033\053\007\001\002\000\044\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\010\uffe8\025\uffe8\031\uffe8\032\uffe8\033\uffe8\036" +
    "\uffe8\042\uffe8\044\uffe8\045\uffe8\046\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\001\002\000\010\037\uffbb\040\uffbb\041\uffbb\001" +
    "\002\000\010\037\133\040\134\041\135\001\002\000\004" +
    "\004\152\001\002\000\044\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\010\uffc0\025\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0" +
    "\042\uffc0\044\uffc0\045\uffc0\046\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\014\004\053\005\032\006\011\010\005" +
    "\033\017\001\002\000\016\007\137\010\141\011\144\012" +
    "\143\013\142\040\140\001\002\000\014\004\053\005\032" +
    "\006\011\010\005\033\017\001\002\000\044\002\uffbf\004" +
    "\uffbf\005\uffbf\006\uffbf\010\uffbf\025\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\036\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\001\002\000\014\004\053\005\032" +
    "\006\011\010\005\033\017\001\002\000\014\004\053\005" +
    "\032\006\011\010\005\033\017\001\002\000\014\004\053" +
    "\005\032\006\011\010\005\033\017\001\002\000\014\004" +
    "\053\005\032\006\011\010\005\033\017\001\002\000\104" +
    "\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\142\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\040\uffc9" +
    "\042\uffc9\044\uffc9\045\uffc9\046\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\001\002\000\104\002\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\142\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\036\uffc8\040\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\001\002\000\104\002\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\142\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\036\uffc7\040\uffc7\042\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002" +
    "\000\104\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\144\012\143\013\142\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca" +
    "\040\uffca\042\uffca\044\uffca\045\uffca\046\uffca\051\uffca\052" +
    "\uffca\053\uffca\001\002\000\104\002\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\144\012\143\013\142\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\036\uffcb\040\uffcb\042\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\010\037" +
    "\uffbc\040\uffbc\041\uffbc\001\002\000\014\004\053\005\032" +
    "\006\011\010\005\033\017\001\002\000\014\004\uffcf\005" +
    "\uffcf\006\uffcf\010\uffcf\033\uffcf\001\002\000\014\004\uffce" +
    "\005\uffce\006\uffce\010\uffce\033\uffce\001\002\000\014\004" +
    "\uffd1\005\uffd1\006\uffd1\010\uffd1\033\uffd1\001\002\000\014" +
    "\004\uffcd\005\uffcd\006\uffcd\010\uffcd\033\uffcd\001\002\000" +
    "\014\004\uffcc\005\uffcc\006\uffcc\010\uffcc\033\uffcc\001\002" +
    "\000\014\004\uffd0\005\uffd0\006\uffd0\010\uffd0\033\uffd0\001" +
    "\002\000\070\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\137" +
    "\010\141\011\144\012\143\013\142\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\036\uffd3\040\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\014\004\053\005\032" +
    "\006\011\010\005\033\017\001\002\000\016\007\137\010" +
    "\141\011\144\012\143\013\142\040\165\001\002\000\044" +
    "\002\uffc1\004\uffc1\005\uffc1\006\uffc1\010\uffc1\025\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\036\uffc1\042\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\051\uffc1\052\uffc1\053\uffc1\001\002\000\004\031" +
    "\167\001\002\000\004\004\170\001\002\000\004\041\uffe6" +
    "\001\002\000\004\041\172\001\002\000\014\004\053\005" +
    "\032\006\011\010\005\033\017\001\002\000\016\007\137" +
    "\010\141\011\144\012\143\013\142\040\174\001\002\000" +
    "\016\004\uffe5\005\uffe5\006\uffe5\010\uffe5\025\uffe5\033\uffe5" +
    "\001\002\000\016\004\053\005\032\006\011\010\005\025" +
    "\014\033\017\001\002\000\014\022\061\023\057\024\060" +
    "\026\055\040\177\001\002\000\006\027\uffe4\030\uffe4\001" +
    "\002\000\006\027\202\030\203\001\002\000\004\034\204" +
    "\001\002\000\004\034\uffe2\001\002\000\004\034\uffe1\001" +
    "\002\000\004\035\205\001\002\000\040\004\021\005\032" +
    "\006\011\010\005\025\014\031\025\032\036\033\017\042" +
    "\035\044\030\045\037\046\027\051\020\052\033\053\007" +
    "\001\002\000\042\004\021\005\032\006\011\010\005\025" +
    "\014\031\025\032\036\033\017\036\207\042\035\044\030" +
    "\045\037\046\027\051\020\052\033\053\007\001\002\000" +
    "\044\002\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\025\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\036\uffe3\042\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\014" +
    "\022\061\023\057\024\060\026\055\034\211\001\002\000" +
    "\104\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\040" +
    "\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\001\002\000\060\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\010\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5\040\uffd5\042" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\001\002\000\104\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\144\012\143\013\142\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\036\uffc3\040\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\040\002\022\005\040\006\014\007\023\010" +
    "\012\012\003\013\030\014\007\015\025\016\033\017\015" +
    "\021\005\022\037\023\021\024\011\001\001\000\002\001" +
    "\001\000\004\002\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\022\023\211\024\011" +
    "\001\001\000\034\002\022\007\023\010\046\012\003\013" +
    "\030\014\007\015\025\016\033\017\015\021\005\022\037" +
    "\023\021\024\011\001\001\000\002\001\001\000\010\002" +
    "\022\023\207\024\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\152\001\001\000" +
    "\004\011\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\043\001\001\000\036\002\022\006\044\007\023\010" +
    "\012\012\003\013\030\014\007\015\025\016\033\017\015" +
    "\021\005\022\037\023\021\024\011\001\001\000\034\002" +
    "\022\007\023\010\046\012\003\013\030\014\007\015\025" +
    "\016\033\017\015\021\005\022\037\023\021\024\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\050" +
    "\001\001\000\002\001\001\000\010\002\022\023\053\024" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\067\001\001\000\002\001\001\000\004\042\065\001" +
    "\001\000\004\043\063\001\001\000\004\041\061\001\001" +
    "\000\010\002\022\023\062\024\011\001\001\000\002\001" +
    "\001\000\010\002\022\023\064\024\011\001\001\000\002" +
    "\001\001\000\010\002\022\023\066\024\011\001\001\000" +
    "\002\001\001\000\010\002\022\023\070\024\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\022\023" +
    "\073\024\011\001\001\000\002\001\001\000\004\040\075" +
    "\001\001\000\002\001\001\000\036\002\022\006\077\007" +
    "\023\010\012\012\003\013\030\014\007\015\025\016\033" +
    "\017\015\021\005\022\037\023\021\024\011\001\001\000" +
    "\034\002\022\007\023\010\046\012\003\013\030\014\007" +
    "\015\025\016\033\017\015\021\005\022\037\023\021\024" +
    "\011\001\001\000\002\001\001\000\004\027\102\001\001" +
    "\000\036\002\022\006\103\007\023\010\012\012\003\013" +
    "\030\014\007\015\025\016\033\017\015\021\005\022\037" +
    "\023\021\024\011\001\001\000\034\002\022\007\023\010" +
    "\046\012\003\013\030\014\007\015\025\016\033\017\015" +
    "\021\005\022\037\023\021\024\011\001\001\000\002\001" +
    "\001\000\004\030\106\001\001\000\002\001\001\000\010" +
    "\002\022\023\110\024\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\022\023\113\024\011\001\001" +
    "\000\004\031\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\022\006\117\007\023\010\012\012\003" +
    "\013\030\014\007\015\025\016\033\017\015\021\005\022" +
    "\037\023\021\024\011\001\001\000\034\002\022\007\023" +
    "\010\046\012\003\013\030\014\007\015\025\016\033\017" +
    "\015\021\005\022\037\023\021\024\011\001\001\000\004" +
    "\032\121\001\001\000\004\020\122\001\001\000\002\001" +
    "\001\000\004\033\124\001\001\000\002\001\001\000\036" +
    "\002\022\006\126\007\023\010\012\012\003\013\030\014" +
    "\007\015\025\016\033\017\015\021\005\022\037\023\021" +
    "\024\011\001\001\000\034\002\022\007\023\010\046\012" +
    "\003\013\030\014\007\015\025\016\033\017\015\021\005" +
    "\022\037\023\021\024\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\135\001\001\000\002\001\001\000" +
    "\004\002\150\001\001\000\002\001\001\000\004\002\147" +
    "\001\001\000\004\002\146\001\001\000\004\002\145\001" +
    "\001\000\004\002\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\170" +
    "\001\001\000\002\001\001\000\004\002\172\001\001\000" +
    "\002\001\001\000\004\035\174\001\001\000\010\002\022" +
    "\023\175\024\011\001\001\000\002\001\001\000\004\036" +
    "\177\001\001\000\004\004\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\022\006\205\007\023\010\012\012\003\013\030" +
    "\014\007\015\025\016\033\017\015\021\005\022\037\023" +
    "\021\024\011\001\001\000\034\002\022\007\023\010\046" +
    "\012\003\013\030\014\007\015\025\016\033\017\015\021" +
    "\005\022\037\023\021\024\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.err.println("ERROR R: ");
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("ERROR N_R: ");
        System.err.println(s);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de acciones vamos a simular atrubutos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		
                Generador_tmp.reset();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= LOG 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(log.etq_true+":\n"+log.etq_false+":");
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= DECLARA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= ASIGNA 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= FOR 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= IF 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= SELECT 
            {
              Object RESULT =null;
		
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= REPEAT 
            {
              Object RESULT =null;
		
                 //Interfaz_c3d.notificar(" "); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= DO_WHILE 
            {
              Object RESULT =null;
		
                //Interfaz_c3d.notificar(" ");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= DETENER 
            {
              Object RESULT =null;
		 //vamos a validar cuando aparecen estas expresiones
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    Interfaz_c3d.notificar("goto "+display.peek().et_salida);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= CONTINUA 
            {
              Object RESULT =null;
		
                if(display.isEmpty()){
                    Interfaz_c3d.notificar("ERROR: no existe una sentecia envolvente valida para detener");
                }else{
                    if(display.peek().tipo==2){
                        Interfaz_c3d.notificar("ERROR: la sentencia envolvnete no permite continue");
                    }else{
                        Interfaz_c3d.notificar("goto "+display.peek().et_salida);
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            {
              Object RESULT =null;

                        tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                        display.push(tmp);
                        aux=Generador_tmp.genera_etq();
                        Interfaz_c3d.notificar(aux+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        Interfaz_c3d.notificar(display.peek().et_inicio+":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DO_WHILE ::= HACER LLAV_A NT$0 SENTENCIAS LLAV_C MIENTRAS NT$1 PAR_A LOG PAR_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        Interfaz_c3d.notificar(log.etq_true+":");
                        Interfaz_c3d.notificar("goto "+aux);
                        Interfaz_c3d.notificar(log.etq_false+":");
                        Interfaz_c3d.notificar(display.peek().et_salida+":");
                        display.pop();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;

                    tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                    display.push(tmp);
                    aux=Generador_tmp.genera_etq();
                    Interfaz_c3d.notificar(aux+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                    Interfaz_c3d.notificar(display.peek().et_inicio+":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // REPEAT ::= REPETIR LLAV_A NT$2 SENTENCIAS LLAV_C HASTA NT$3 PAR_A LOG PAR_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Interfaz_c3d.notificar(log.etq_false+":");
                    Interfaz_c3d.notificar("goto "+aux);
                    Interfaz_c3d.notificar(log.etq_true+":");
                    Interfaz_c3d.notificar(display.peek().et_salida+":");
                    display.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPEAT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 
                heredado=log.etq_false; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= SI PAR_A LOG NT$4 PAR_C LLAV_A SENTENCIAS LLAV_C NT$5 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =null;

                aux=Generador_tmp.genera_etq();
                Interfaz_c3d.notificar("goto "+aux);
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= SINO NT$6 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Interfaz_c3d.notificar(aux+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar(heredado+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$7 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                heredado=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(id+"="+exp); //asigna el valor
                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR ::= PARA PAR_A INT1 ID NT$7 ASIG EXP PYCOMA NT$8 LOG PYCOMA NT$9 OPER PAR_C LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Interfaz_c3d.notificar(op);    
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPER ::= INC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"+1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPER ::= DEC 
            {
              String RESULT =null;
		
                    String tmp=Generador_tmp.genera_tmp(); 
                    RESULT=tmp+"="+heredado+"-1\n"+heredado+"="+tmp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =null;

                tmp =  new Display(Generador_tmp.genera_etq(),Generador_tmp.genera_etq(),1);
                display.push(tmp);
                Interfaz_c3d.notificar(display.peek().et_inicio+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(log.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE ::= MIENTRAS NT$10 PAR_A LOG PAR_C NT$11 LLAV_A SENTENCIAS LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Atributo_C3D log = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                Interfaz_c3d.notificar("goto "+display.peek().et_inicio); //etiqueta que retorna a la condición
                Interfaz_c3d.notificar(log.etq_false+":");
                Interfaz_c3d.notificar(display.peek().et_salida+":");
                display.pop();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$12 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LOG ::= LOG OR NT$12 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_true+","+rel2.etq_true;  
                RESULT.etq_false= rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$13 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LOG ::= LOG AND NT$13 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel2.etq_true;  
                RESULT.etq_false= rel1.etq_false+","+rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_false+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LOG ::= LOG XOR NT$14 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Interfaz_c3d.notificar(rel1.etq_true+":");
                Interfaz_c3d.notificar(rel2.aux);
                RESULT= new Atributo_C3D();
                RESULT.etq_true =rel2.etq_true;
                RESULT.etq_false=rel2.etq_false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$15 ::= 
            {
              Atributo_C3D RESULT =null;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Interfaz_c3d.notificar(rel1.etq_true+":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LOG ::= LOG NAND NT$15 LOG 
            {
              Atributo_C3D RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Atributo_C3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rel1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rel1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Atributo_C3D rel1 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rel2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rel2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel2 = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Atributo_C3D();
                RESULT.etq_true= rel1.etq_false+","+rel2.etq_false;  
                RESULT.etq_false= rel2.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LOG ::= NOT LOG 
            {
              Atributo_C3D RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D rel = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true = rel.etq_false;
                RESULT.etq_false = rel.etq_true;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LOG ::= REL 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REL ::= EXP OP_REL EXP 
            {
              Atributo_C3D RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.etq_true= Generador_tmp.genera_etq();
                RESULT.etq_false= Generador_tmp.genera_etq();
                //imprimimos la condicion de la expresion relacional con su saltos
                Interfaz_c3d.notificar("if "+t1+op+t2+" then goto "+RESULT.etq_true+"\ngoto "+RESULT.etq_false);
                // creamos la cadena temporal solo se usa en XOR
                RESULT.aux= "if "+t1+op+t2+" then goto "+RESULT.etq_false+"\ngoto "+RESULT.etq_true; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // REL ::= EXP 
            {
              Atributo_C3D RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Atributo_C3D();
                RESULT.aux= val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= ABOVE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_REL ::= BELOW 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_REL ::= ABOVEE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_REL ::= BELOWE 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_REL ::= EQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_REL ::= NEQUAL 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=sim;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_REL",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP MAS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp(); //sintetizo el temporal 
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2); //imprimo la cadena la operacion
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP MENOS EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP POR EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP DIV EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= EXP POT EXP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+val+sim+val2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= ENTERO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= DECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT=val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= MENOS EXP 
            {
              String RESULT =null;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=Generador_tmp.genera_tmp();
                Interfaz_c3d.notificar(RESULT+"="+sim+val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= PAR_A LOG PAR_C 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Atributo_C3D val = (Atributo_C3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = val.aux;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNA ::= ID ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar(id+"="+exp);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARA ::= TIPO L PYCOMA 
            {
              Object RESULT =null;
		
                Interfaz_c3d.notificar("Reserva espacio y almacena el id de las variables.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARA ::= TIPO L ASIG EXP PYCOMA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Interfaz_c3d.notificar("Asigna "+exp+" a cada varibale declarada.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= INT1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= CHAR1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L ::= L COMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
